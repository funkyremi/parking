{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["corsProxy","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","parkings","openMap","Chart","pluginService","register","beforeDraw","chart","config","options","elements","center","ctx","centerConfig","fontStyle","txt","text","color","sidePaddingCalculated","sidePadding","innerRadius","font","stringWidth","measureText","width","widthRatio","newFontSize","Math","floor","elementHeight","fontSizeToUse","min","textAlign","textBaseline","centerX","chartArea","left","right","centerY","top","bottom","fillStyle","fillText","_this2","updateData","setInterval","parkingName","replace","parkingsArray","_this3","sort","a","b","formatParkingName","name","locationName","concat","split","filter","Boolean","join","_this4","window","fetch","then","res","json","result","resources","forEach","id","includes","url","r","str","DOMParser","parseFromString","data","status","getElementsByTagName","childNodes","nodeValue","free","Number","total","find","p","index","findIndex","splice","setState","sortParkingsArray","push","elem","document","getElementById","self","Pressure","set","change","force","event","size","style","transform","console","log","location","setTimeout","getMapLink","end","e","_this5","react_default","createElement","className","src","alt","length","react_loading_default","type","height","map","key","statusStyle","es","legend","display","tooltips","enabled","datasets","backgroundColor","href","role","aria-label","React","Component","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.845de072.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { Chart, Doughnut } from \"react-chartjs-2\";\nimport ReactLoading from \"react-loading\";\nimport Pressure from \"pressure\";\n\nconst refreshInterval = 30000;\nconst corsProxy = \"https://api.codetabs.com/v1/proxy?quest=\";\nconst parkingsUrl =\n  \"https://data.montpellier3m.fr/api/3/action/package_show?id=90e17b94-989f-4d66-83f4-766d4587bec2\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      parkings: [],\n      openMap: false\n    };\n  }\n  componentWillMount() {\n    Chart.pluginService.register({\n      beforeDraw: function(chart) {\n        if (chart.config.options.elements.center) {\n          var ctx = chart.chart.ctx;\n          var centerConfig = chart.config.options.elements.center;\n          var fontStyle = centerConfig.fontStyle || \"Arial\";\n          var txt = centerConfig.text;\n          var color = centerConfig.color || \"#000\";\n          var sidePadding = centerConfig.sidePadding || 20;\n          var sidePaddingCalculated =\n            (sidePadding / 100) * (chart.innerRadius * 2);\n          ctx.font = \"30px \" + fontStyle;\n          var stringWidth = ctx.measureText(txt).width;\n          var elementWidth = chart.innerRadius * 2 - sidePaddingCalculated;\n          var widthRatio = elementWidth / stringWidth;\n          var newFontSize = Math.floor(30 * widthRatio);\n          var elementHeight = chart.innerRadius * 2;\n          var fontSizeToUse = Math.min(newFontSize, elementHeight);\n          ctx.textAlign = \"center\";\n          ctx.textBaseline = \"middle\";\n          var centerX = (chart.chartArea.left + chart.chartArea.right) / 2;\n          var centerY = (chart.chartArea.top + chart.chartArea.bottom) / 2;\n          ctx.font = fontSizeToUse + \"px \" + fontStyle;\n          ctx.fillStyle = color;\n          ctx.fillText(txt, centerX, centerY);\n        }\n      }\n    });\n  }\n  componentDidMount() {\n    this.updateData();\n    setInterval(() => {\n      this.updateData();\n    }, refreshInterval);\n  }\n  formatParkingName(parkingName) {\n    return parkingName.replace(/Parking\\sd?u?\\s?/g, \"\");\n  }\n  sortParkingsArray(parkingsArray) {\n    return parkingsArray.sort((a, b) => {\n      if (this.formatParkingName(a.name) < this.formatParkingName(b.name)) {\n        return -1;\n      }\n      if (this.formatParkingName(a.name) > this.formatParkingName(b.name)) {\n        return 1;\n      }\n      return 0;\n    });\n  }\n  getMapLink(locationName) {\n    return `http://maps.apple.com/?daddr=${locationName\n      .split(\" \")\n      .filter(Boolean)\n      .join(\"+\")}&dirflg=d&t=h`;\n  }\n  updateData() {\n    window\n      .fetch(`${corsProxy}${parkingsUrl}`)\n      .then(res => res.json())\n      .then(json => {\n        const resources = json.result.resources;\n        resources.forEach(res => {\n          const name = res.name;\n          const id = res.id;\n          if (name && !name.includes(\".xml\")) {\n            window\n              .fetch(`${corsProxy}${res.url}`)\n              .then(r => r.text())\n              .then(str =>\n                new window.DOMParser().parseFromString(str, \"text/xml\")\n              )\n              .then(data => {\n                try {\n                  const status = data.getElementsByTagName(\"Status\")[0]\n                    .childNodes[0].nodeValue;\n                  const free = Number(\n                    data.getElementsByTagName(\"Free\")[0].childNodes[0].nodeValue\n                  );\n                  const total = Number(\n                    data.getElementsByTagName(\"Total\")[0].childNodes[0]\n                      .nodeValue\n                  );\n                  if (this.state.parkings.find(p => p.name === name)) {\n                    const parkingsArray = this.state.parkings;\n                    const index = this.state.parkings.findIndex(\n                      p => p.name === name\n                    );\n                    parkingsArray.splice(index, 1, {\n                      id,\n                      name,\n                      status,\n                      free,\n                      total\n                    });\n                    this.setState({\n                      parkings: this.sortParkingsArray(parkingsArray)\n                    });\n                  } else {\n                    const parkingsArray = this.state.parkings;\n                    parkingsArray.push({\n                      id,\n                      name,\n                      status,\n                      free,\n                      total\n                    });\n                    this.setState({\n                      parkings: this.sortParkingsArray(parkingsArray)\n                    });\n                    const elem = document.getElementById(id);\n                    const self = this;\n                    Pressure.set(elem, {\n                      change: function(force, event) {\n                        const size = 1 + force / 2;\n                        document.getElementById(\n                          id\n                        ).style.transform = `scale(${size})`;\n                        if (force === 1 && !self.state.openMap) {\n                          self.setState({\n                            openMap: true\n                          });\n                          console.log(window.location);\n                          setTimeout(() => {\n                            window.location = self.getMapLink(name);\n                          }, 5);\n                          document.getElementById(id).style.transform =\n                            \"scale(1)\";\n                        }\n                      },\n                      end: function() {\n                        document.getElementById(id).style.transform =\n                          \"scale(1)\";\n                        self.setState({\n                          openMap: false\n                        });\n                      }\n                    });\n                  }\n                } catch (e) {}\n              });\n          }\n        });\n      });\n  }\n  statusStyle(status) {\n    return status === \"Open\" ? \"text-open\" : \"text-closed\";\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <span id=\"test\" className=\"logo noselect default-cursor\">\n          MONT\n          <img\n            src=\"p.jpg\"\n            alt=\"logo\"\n            className=\"animated pulse infinite logo-img\"\n          />\n          ELLIER\n        </span>\n        <div className=\"container\">\n          {this.state.parkings.length === 0 && (\n            <ReactLoading\n              type={\"spinningBubbles\"}\n              color={\"#3258a1\"}\n              className={\"preloader\"}\n              height={\"5em\"}\n              width={\"5em\"}\n            />\n          )}\n          <div className=\"row\">\n            {this.state.parkings.map(p => (\n              <div\n                className=\"col-xs-12 col-sm-6 col-md-4 col-xl-3 margin-bottom\"\n                key={p.id}\n              >\n                <h5\n                  className={`default-cursor noselect text-bold ${this.statusStyle(\n                    p.status\n                  )}`}\n                >\n                  {this.formatParkingName(p.name)}\n                </h5>\n                <div id={p.id}>\n                  <Doughnut\n                    options={{\n                      legend: {\n                        display: false\n                      },\n                      tooltips: {\n                        enabled: false\n                      },\n                      elements: {\n                        center: {\n                          text: p.free,\n                          color: \"rgb(75, 192, 192)\",\n                          fontStyle: \"Helvetica\",\n                          sidePadding: 30\n                        }\n                      }\n                    }}\n                    data={{\n                      datasets: [\n                        {\n                          data: [p.total - p.free, p.free],\n                          backgroundColor: [\n                            \"rgb(255, 99, 132)\",\n                            \"rgb(75, 192, 192)\"\n                          ]\n                        }\n                      ]\n                    }}\n                  />\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n        <div className=\"footer\">\n          <a href=\"https://github.com/funkyremi\">Made with <span role=\"img\" aria-label=\"love\">️❤️</span> in Montpellier</a>\n          <br/>\n          <a href=\"https://data.montpellier3m.fr\">Sources : Open Data Montpellier Méditerranée Métropole</a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}