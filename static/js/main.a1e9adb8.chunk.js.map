{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","parkings","_this2","updateData","setInterval","_this3","window","fetch","concat","then","res","json","result","resources","forEach","name","includes","url","r","text","str","DOMParser","parseFromString","data","status","getElementsByTagName","childNodes","nodeValue","free","Number","total","find","p","oldParkings","index","findIndex","splice","setState","push","e","_this4","react_default","a","createElement","className","src","alt","map","key","statusStyle","replace","es","options","legend","display","datasets","backgroundColor","labels","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a1e9adb8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { Doughnut } from \"react-chartjs-2\";\n\nconst refreshInterval = 30000;\nconst corsProxy = \"https://cors.io/?\";\nconst parkingsUrl =\n  \"https://data.montpellier3m.fr/api/3/action/package_show?id=90e17b94-989f-4d66-83f4-766d4587bec2\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      parkings: []\n    };\n  }\n  componentDidMount() {\n    this.updateData();\n\n    setInterval(() => {\n      this.updateData();\n    }, refreshInterval);\n  }\n  updateData() {\n    window\n      .fetch(`${corsProxy}${parkingsUrl}`)\n      .then(res => res.json())\n      .then(json => {\n        const resources = json.result.resources;\n        resources.forEach(res => {\n          const name = res.name;\n          if (name && !name.includes(\".xml\")) {\n            window\n              .fetch(`${corsProxy}${res.url}`)\n              .then(r => r.text())\n              .then(str =>\n                new window.DOMParser().parseFromString(str, \"text/xml\")\n              )\n              .then(data => {\n                try {\n                  const status = data.getElementsByTagName(\"Status\")[0]\n                    .childNodes[0].nodeValue;\n                  const free = Number(\n                    data.getElementsByTagName(\"Free\")[0].childNodes[0].nodeValue\n                  );\n                  const total = Number(\n                    data.getElementsByTagName(\"Total\")[0].childNodes[0]\n                      .nodeValue\n                  );\n                  if (this.state.parkings.find(p => p.name === name)) {\n                    const oldParkings = this.state.parkings;\n                    const index = this.state.parkings.findIndex(\n                      p => p.name === name\n                    );\n                    oldParkings.splice(index, 1, {\n                      name,\n                      status,\n                      free,\n                      total\n                    });\n                    this.setState({\n                      parkings: oldParkings\n                    });\n                  } else {\n                    const oldParkings = this.state.parkings;\n                    oldParkings.push({\n                      name,\n                      status,\n                      free,\n                      total\n                    });\n                    this.setState({\n                      parkings: oldParkings\n                    });\n                  }\n                } catch (e) {}\n              });\n          }\n        });\n      });\n  }\n  statusStyle(status) {\n    return status === \"Open\" ? \"text-open\" : \"text-closed\";\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <img src=\"montpellier-logo.png\" alt=\"Montpellier Parkings\" />\n          <br/>\n          <br/>\n          <h1 className=\"refresh\">Parkings Montpellier MÃ©tropole</h1>\n          <br />\n          <br />\n          <div className=\"row\">\n            {this.state.parkings.map(p => (\n              <div className=\"col-sm-4 col-md-3 margin-bottom\" key={p.name}>\n                <h4 className={`text-bold ${this.statusStyle(p.status)}`}>\n                  {p.name.replace(/Parking\\sd?u?\\s?/g, '')} ({p.free})\n                </h4>\n                <Doughnut\n                  options={{\n                    legend: {\n                      display: false\n                    }\n                  }}\n                  data={{\n                    datasets: [\n                      {\n                        data: [p.total - p.free, p.free],\n                        backgroundColor: [\n                          \"rgb(255, 99, 132)\",\n                          \"rgb(75, 192, 192)\"\n                        ]\n                      }\n                    ],\n                    labels: [\"Places prises\", \"Places restantes\"]\n                  }}\n                />\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}